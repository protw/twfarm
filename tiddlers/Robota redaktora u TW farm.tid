created: 20190712183739489
modified: 20190804130043320
order: 035
parent: Як працювати з TW farm
tags: [[TW farm]]
title: Робота редактора у TW farm
type: text/vnd.tiddlywiki

Тут описані процедури і структури метода //TW Farm//. В першу чергу ці знання необхідні редактору вікі-ферми. Частина матеріалу описана у [[матеріалах для авторів|Робота авторів у TW farm]] і, тому, тут повторюватись не буде. Через це варто спочатку ознайомитись з матеріалами для авторів, тим більше, що редактор теж може виступати у ролі автора.

!! Розміщення вікі ферми на локальному комп'ютері

Всі вікі створюються, запускаються і розробляються у багатофайловому режимі під управлінням //Node.js//. 

Структура розміщення на локальному комп'ютері доволі проста. Типова структура вікі-ферми має такий вигляд:

```
\<server_bob>
\<other_dir>\.git\
\<tw_farm>
    \docs
        \images
        \<wiki_1>
        \<wiki_2>
        ...
        \<wiki_N>
        index.html
    \wiki_bag
        \<wiki_1>
        \<wiki_2>
        ...
        \<wiki_N>
    \wiki_main
    \wiki_template
    .git
    .gitignore
    desktop.ini
    README.md
    tw_builder.bat
    tw_builder.m
    tw_exclude.list
```

В обраному фолдері `\<tw_farm>` розміщена повністю вся вікі ферма. Ззовні від `\<tw_farm>` розташовані:

* `\<server_bob>` - фолдер із системою підтримки локального сервера //TW// для запуску багатьох вікі (на базі [[BobEXE|https://github.com/OokTech/TW5-BobEXE]]);
* `\<other_dir>\.git\` - фолдер, в який винесена історія контролю версій вікі-ферми.

Всередині фолдер вікі-ферми `\<tw_farm>` містить: 

* `\wiki_bag` - фолдер, в якому розміщені фолдери окремих вікі під //Node.js// - `\<wiki_1>`, `\<wiki_2>`, ... `\<wiki_N>`; у кожному вікі-фолдері є два структурних елементи: субфолдер `\tiddlers` і файл `tiddlywiki.info`;
* `\wiki_main` - фолдер вікі, в якій розміщений каталог вікі-ферми;
* `\docs` - фолдер зі згенерованими для публікації змістом: файл `index.html` і фолдер зображень `\images` згенеровано з вікі-фолдеру `\wiki_main`; далі у кожному субфолдері з переліку `\<wiki_1>`, `\<wiki_2>`, ... `\<wiki_N>` у свою чергу розміщено своя пара елементів - файл `index.html` і фолдер зображень `\images`, що згенеровані з відповідного вікі-субфолдеру з `\wiki_bag`;
* `\wiki_template` - фолдер [[шаблонної вікі|Шаблонна вікі]];
*  `.git` - файл, що містить посилання на  історія контролю версій вікі-ферми; цей файл утворюються під час ініціації локального репозитарія з допомогою консольної команди:
*> `> git init --separate-git-dir D:\boa_protw\_PROJHUB\.git`,
** де `D:\boa_protw\_PROJHUB\.git` зазначений вище зовнішній фолдер `\<other_dir>\.git\` зберігання історії контролю версій вікі-ферми; в результаті файл `.git` має наступний текстовий зміст:
*> `gitdir: D:/boa_protw/_PROJHUB/.git`
* `desktop.ini` - файл, що утворює в кожному фолдері області синхронізації програма //Google Backup and Sync//;
* `.gitignore` - файл зі списком виключень для //git//, що містить короткий текстовий зміст - `desktop.ini` у зв'язку з тим, що ці файли не представляють інтерес для історії версій вікі-ферми;
* `tw_builder.bat` - файл сценарію [[загального процесу публікування|Загальний процес публікування]];
* `tw_builder.m` - файл сценарію (програмний модуль), написаний мовою програмування високого рівня //Octave//, розташований на локальному комп'ютері випускового редактора команди; запускається через `tw_builder.bat`; з допомогою цього модулю редактор проводить процедури оновлення каталогу колекції вікі; для цього цей модуль збирає з кожної вікі з `\wiki_bag` стандартизовані тідлери `$:/boa/logo` та копіює їх (зі зміною імені) до вікі `\wiki_main`, яка служить каталогом вікі-колекції; також цей програмний модуль щоразу після перебудови каталогу колекції, оновлює у фолдері `\docs` однофайлові примірники вікі для публікації в інтернеті - `index.html` і всі зображення кожної вікі, що винесені у фолдер `images/`;
* `tw_exclude.list` - файл  зі списком виключень, що містить короткий текстовий зміст - `desktop.ini`; використовується програмним модулем `tw_builder.m`.

Для командної роботи над вмістом вікі, редактор синхронізує \<tw_farm> з //Гугл Диском// з допомогою //Google Drive Backup and Sync//, а потім надає відповідні доступи іншим. Фолдер `\<server_bob>` кожний учасник команди запускає і налаштовує самостійно на власному комп'ютері. Це пов'язано з тим, що кожний учасник команди може мати доступ до різних вікі, а також конкретні імена дисків і кореневих фолдерів у членів команди можуть відрізнятись.

!! Розміщення на //Github//

Тут ми розглядаємо в якості системи опубліковання сервіс //Github Pages// ([[github.io|https://github.io]]), що щільно пов'язаний із сервісом *Github* ([[github.com|https://github.com]]).

Файли для публікації сайтів *Сторінка проекту* зберігаються у тому ж самому сховищі на //github.com//, що й їхній проект, і публікуються з одного з таких розташувань (див. [[документацію|https://help.github.com/en/articles/user-organization-and-project-pages]]):

# ''master'' гілка (//branch//);
# ''gh-pages'' гілка;
# папка з назвою ''docs'', що розташована на гілці ''master''.

Другий варіант використовує для підготовки публікації потужний, але доволі складний сервіс безперервної збірки (//continuous integration - CI//) - [[Travis CI|https://travis-ci.org]]. Саме через складність цього варіанту ми тут його не розглядаємо для широкого вжитку.

Структура вікі-ферми, що описана вище, пристосована безпосередньо для третього варіанту (папка з назвою ''docs'', що розташована на гілці ''master'').

Передбачається, що редактор має мінімальне уявлення про роботу з //github.com//. 

Тому після утворення на обліковці організації `<org>` (у нашому випадку це `protw`) проекту вікі-ферми `<tw_farm>` ((у нашому випадку це `projhub`)) потрібно здійснити важливе налаштування:

* зайти і зареєструватись на //github.com//;
* обрати там проект вікі-ферми `protw/projhub`;
* обрати в меню пункт `Settings` або перейти за посиланням `https://github.com/protw/projhub/settings`;
* спуститися нижче до розділу `GitHub Pages`;
* у спадному меню під назвою `Source` з трьох пунктів обрати ''master branch/doc folder'';

Це все.

!! Веб-адресація в інтернеті

Внаслідок згенерованої файлової структури у фолдері `\docs` всі опубліковані (в інтернеті) вікі за своїмі адресами утворюють аналогічну дворівневу ієрархічну структуру - одна вікі на верхньому рівні, решта вікі на другому рівні:

```
   <base_address>/<tw_farm>
   <base_address>/<tw_farm>/<wiki_1>
   <base_address>/<tw_farm>/<wiki_2>
   ...
   <base_address>/<tw_farm>/<wiki_N>
```
Базова адреса `<base_address>` в залежності обраного механізму публікування 1 або 3 може мати такий вигляд:

> `https://<org>.github.io` 
У разі публікації файлів через організаційну сторінку користувача або організації, потреба у проміжному фолдері `/docs` у //Github// сховищі проекту зникає і веб-адреса ще більше скорочується на `/<tw_farm>`.